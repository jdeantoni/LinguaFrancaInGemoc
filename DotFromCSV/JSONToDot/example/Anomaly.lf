 /**
 * This program illustrates the strangeness of the way microsteps are currently handled
 * (at least as of February, 2021) when scheduling in the future. The two outputs of the
 * Source reactor s are never simultaneous.  At the Destination reactor d1, they are also
 * never simultaneous, but at d2, they are always simultaneous.
 * 
 * @author Edward A. Lee
 */
target C {
    timeout: 50 msec,
}
reactor Source {
    output out1:int;
    output out2:int;
    logical action redo;
    state count:int(0);
    reaction(startup, redo) -> out1, out2, redo {=
        if (self->count++ < 4) {
            if (self->count % 2 == 0) {
               SET (out2, self->count);
            } else {
               SET(out1, self->count);
            }
            schedule(redo, 0);
        } else {
            self->count = 0;
            // The following resets the microstep to 0.
            // If it were to not do that, then microsteps would
            // grow monotonically as execution advances.
            schedule(redo, MSEC(10));
        }
    =}
}
reactor Destination(name:string("dest")) {
    input in1:int;
    input in2:int;
    reaction (in1, in2) {=
        if (in1->is_present) {
            printf("%s: Tag (%lld, %d): in1 received %d\n", self->name, get_elapsed_logical_time(), get_microstep(), in1->value);
        }
        if (in2->is_present) {
            printf("%s: Tag (%lld, %d): in2 received %d\n", self->name, get_elapsed_logical_time(), get_microstep(), in2->value);
        }
    =}
}
main reactor Anomaly {
    s = new Source();
    d1 = new Destination(name = 'd1');
    d2 = new Destination(name = "d2");
    s.out1 -> d1.in1;
    s.out2 -> d1.in2;
    s.out1 -> d2.in1 after 5 msec;
    s.out2 -> d2.in2 after 5 msec;
}